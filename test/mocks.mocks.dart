// Mocks generated by Mockito 5.4.5 from annotations
// in crud_backend_flutter/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crud_backend_flutter/models/person.dart' as _i6;
import 'package:crud_backend_flutter/services/cache_service.dart' as _i7;
import 'package:crud_backend_flutter/services/database_service.dart' as _i4;
import 'package:crud_backend_flutter/services/queue_service.dart' as _i8;
import 'package:dart_amqp/dart_amqp.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mongo_dart/mongo_dart.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDb_0 extends _i1.SmartFake implements _i2.Db {
  _FakeDb_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDbCollection_1 extends _i1.SmartFake implements _i2.DbCollection {
  _FakeDbCollection_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClient_2 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i4.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Db get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeDb_0(this, Invocation.getter(#db)),
          )
          as _i2.Db);

  @override
  _i2.DbCollection get personCollection =>
      (super.noSuchMethod(
            Invocation.getter(#personCollection),
            returnValue: _FakeDbCollection_1(
              this,
              Invocation.getter(#personCollection),
            ),
          )
          as _i2.DbCollection);

  @override
  set personCollection(_i2.DbCollection? _personCollection) =>
      super.noSuchMethod(
        Invocation.setter(#personCollection, _personCollection),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> connect() =>
      (super.noSuchMethod(
            Invocation.method(#connect, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Person>> getPersons() =>
      (super.noSuchMethod(
            Invocation.method(#getPersons, []),
            returnValue: _i5.Future<List<_i6.Person>>.value(<_i6.Person>[]),
          )
          as _i5.Future<List<_i6.Person>>);

  @override
  _i5.Future<void> addPerson(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#addPerson, [name]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deletePerson(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePerson, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i7.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> connect() =>
      (super.noSuchMethod(
            Invocation.method(#connect, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setPersonCache(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setPersonCache, [key, value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getPersonCache(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getPersonCache, [key]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);
}

/// A class which mocks [QueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueueService extends _i1.Mock implements _i8.QueueService {
  MockQueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_2(this, Invocation.getter(#client)),
          )
          as _i3.Client);

  @override
  _i5.Future<void> publishMessage(String? message) =>
      (super.noSuchMethod(
            Invocation.method(#publishMessage, [message]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
